
using Microsoft.CodeAnalysis.CSharp;
namespace SourceGeneratorSupplement.Factory;
public static partial class Keyword
{
	public static string Bool => SyntaxFacts.GetText(SyntaxKind.BoolKeyword);
	public static string Byte => SyntaxFacts.GetText(SyntaxKind.ByteKeyword);
	public static string SByte => SyntaxFacts.GetText(SyntaxKind.SByteKeyword);
	public static string Short => SyntaxFacts.GetText(SyntaxKind.ShortKeyword);
	public static string UShort => SyntaxFacts.GetText(SyntaxKind.UShortKeyword);
	public static string Int => SyntaxFacts.GetText(SyntaxKind.IntKeyword);
	public static string UInt => SyntaxFacts.GetText(SyntaxKind.UIntKeyword);
	public static string Long => SyntaxFacts.GetText(SyntaxKind.LongKeyword);
	public static string ULong => SyntaxFacts.GetText(SyntaxKind.ULongKeyword);
	public static string Double => SyntaxFacts.GetText(SyntaxKind.DoubleKeyword);
	public static string Float => SyntaxFacts.GetText(SyntaxKind.FloatKeyword);
	public static string Decimal => SyntaxFacts.GetText(SyntaxKind.DecimalKeyword);
	public static string String => SyntaxFacts.GetText(SyntaxKind.StringKeyword);
	public static string Char => SyntaxFacts.GetText(SyntaxKind.CharKeyword);
	public static string Void => SyntaxFacts.GetText(SyntaxKind.VoidKeyword);
	public static string Object => SyntaxFacts.GetText(SyntaxKind.ObjectKeyword);
	public static string TypeOf => SyntaxFacts.GetText(SyntaxKind.TypeOfKeyword);
	public static string SizeOf => SyntaxFacts.GetText(SyntaxKind.SizeOfKeyword);
	public static string Null => SyntaxFacts.GetText(SyntaxKind.NullKeyword);
	public static string True => SyntaxFacts.GetText(SyntaxKind.TrueKeyword);
	public static string False => SyntaxFacts.GetText(SyntaxKind.FalseKeyword);
	public static string If => SyntaxFacts.GetText(SyntaxKind.IfKeyword);
	public static string Else => SyntaxFacts.GetText(SyntaxKind.ElseKeyword);
	public static string While => SyntaxFacts.GetText(SyntaxKind.WhileKeyword);
	public static string For => SyntaxFacts.GetText(SyntaxKind.ForKeyword);
	public static string ForEach => SyntaxFacts.GetText(SyntaxKind.ForEachKeyword);
	public static string Do => SyntaxFacts.GetText(SyntaxKind.DoKeyword);
	public static string Switch => SyntaxFacts.GetText(SyntaxKind.SwitchKeyword);
	public static string Case => SyntaxFacts.GetText(SyntaxKind.CaseKeyword);
	public static string Default => SyntaxFacts.GetText(SyntaxKind.DefaultKeyword);
	public static string Try => SyntaxFacts.GetText(SyntaxKind.TryKeyword);
	public static string Catch => SyntaxFacts.GetText(SyntaxKind.CatchKeyword);
	public static string Finally => SyntaxFacts.GetText(SyntaxKind.FinallyKeyword);
	public static string Lock => SyntaxFacts.GetText(SyntaxKind.LockKeyword);
	public static string Goto => SyntaxFacts.GetText(SyntaxKind.GotoKeyword);
	public static string Break => SyntaxFacts.GetText(SyntaxKind.BreakKeyword);
	public static string Continue => SyntaxFacts.GetText(SyntaxKind.ContinueKeyword);
	public static string Return => SyntaxFacts.GetText(SyntaxKind.ReturnKeyword);
	public static string Throw => SyntaxFacts.GetText(SyntaxKind.ThrowKeyword);
	public static string Public => SyntaxFacts.GetText(SyntaxKind.PublicKeyword);
	public static string Private => SyntaxFacts.GetText(SyntaxKind.PrivateKeyword);
	public static string Internal => SyntaxFacts.GetText(SyntaxKind.InternalKeyword);
	public static string Protected => SyntaxFacts.GetText(SyntaxKind.ProtectedKeyword);
	public static string Static => SyntaxFacts.GetText(SyntaxKind.StaticKeyword);
	public static string ReadOnly => SyntaxFacts.GetText(SyntaxKind.ReadOnlyKeyword);
	public static string Sealed => SyntaxFacts.GetText(SyntaxKind.SealedKeyword);
	public static string Const => SyntaxFacts.GetText(SyntaxKind.ConstKeyword);
	public static string Fixed => SyntaxFacts.GetText(SyntaxKind.FixedKeyword);
	public static string StackAlloc => SyntaxFacts.GetText(SyntaxKind.StackAllocKeyword);
	public static string Volatile => SyntaxFacts.GetText(SyntaxKind.VolatileKeyword);
	public static string New => SyntaxFacts.GetText(SyntaxKind.NewKeyword);
	public static string Override => SyntaxFacts.GetText(SyntaxKind.OverrideKeyword);
	public static string Abstract => SyntaxFacts.GetText(SyntaxKind.AbstractKeyword);
	public static string Virtual => SyntaxFacts.GetText(SyntaxKind.VirtualKeyword);
	public static string Event => SyntaxFacts.GetText(SyntaxKind.EventKeyword);
	public static string Extern => SyntaxFacts.GetText(SyntaxKind.ExternKeyword);
	public static string Ref => SyntaxFacts.GetText(SyntaxKind.RefKeyword);
	public static string Out => SyntaxFacts.GetText(SyntaxKind.OutKeyword);
	public static string In => SyntaxFacts.GetText(SyntaxKind.InKeyword);
	public static string Is => SyntaxFacts.GetText(SyntaxKind.IsKeyword);
	public static string As => SyntaxFacts.GetText(SyntaxKind.AsKeyword);
	public static string Params => SyntaxFacts.GetText(SyntaxKind.ParamsKeyword);
	public static string ArgList => SyntaxFacts.GetText(SyntaxKind.ArgListKeyword);
	public static string MakeRef => SyntaxFacts.GetText(SyntaxKind.MakeRefKeyword);
	public static string RefType => SyntaxFacts.GetText(SyntaxKind.RefTypeKeyword);
	public static string RefValue => SyntaxFacts.GetText(SyntaxKind.RefValueKeyword);
	public static string This => SyntaxFacts.GetText(SyntaxKind.ThisKeyword);
	public static string Base => SyntaxFacts.GetText(SyntaxKind.BaseKeyword);
	public static string Namespace => SyntaxFacts.GetText(SyntaxKind.NamespaceKeyword);
	public static string Using => SyntaxFacts.GetText(SyntaxKind.UsingKeyword);
	public static string Class => SyntaxFacts.GetText(SyntaxKind.ClassKeyword);
	public static string Struct => SyntaxFacts.GetText(SyntaxKind.StructKeyword);
	public static string Interface => SyntaxFacts.GetText(SyntaxKind.InterfaceKeyword);
	public static string Enum => SyntaxFacts.GetText(SyntaxKind.EnumKeyword);
	public static string Delegate => SyntaxFacts.GetText(SyntaxKind.DelegateKeyword);
	public static string Checked => SyntaxFacts.GetText(SyntaxKind.CheckedKeyword);
	public static string Unchecked => SyntaxFacts.GetText(SyntaxKind.UncheckedKeyword);
	public static string Unsafe => SyntaxFacts.GetText(SyntaxKind.UnsafeKeyword);
	public static string Operator => SyntaxFacts.GetText(SyntaxKind.OperatorKeyword);
	public static string Explicit => SyntaxFacts.GetText(SyntaxKind.ExplicitKeyword);
	public static string Implicit => SyntaxFacts.GetText(SyntaxKind.ImplicitKeyword);
	public static string Yield => SyntaxFacts.GetText(SyntaxKind.YieldKeyword);
	public static string Partial => SyntaxFacts.GetText(SyntaxKind.PartialKeyword);
	public static string Alias => SyntaxFacts.GetText(SyntaxKind.AliasKeyword);
	public static string Global => SyntaxFacts.GetText(SyntaxKind.GlobalKeyword);
	public static string Assembly => SyntaxFacts.GetText(SyntaxKind.AssemblyKeyword);
	public static string Module => SyntaxFacts.GetText(SyntaxKind.ModuleKeyword);
	public static string Type => SyntaxFacts.GetText(SyntaxKind.TypeKeyword);
	public static string Field => SyntaxFacts.GetText(SyntaxKind.FieldKeyword);
	public static string Method => SyntaxFacts.GetText(SyntaxKind.MethodKeyword);
	public static string Param => SyntaxFacts.GetText(SyntaxKind.ParamKeyword);
	public static string Property => SyntaxFacts.GetText(SyntaxKind.PropertyKeyword);
	public static string TypeVar => SyntaxFacts.GetText(SyntaxKind.TypeVarKeyword);
	public static string Get => SyntaxFacts.GetText(SyntaxKind.GetKeyword);
	public static string Set => SyntaxFacts.GetText(SyntaxKind.SetKeyword);
	public static string Add => SyntaxFacts.GetText(SyntaxKind.AddKeyword);
	public static string Remove => SyntaxFacts.GetText(SyntaxKind.RemoveKeyword);
	public static string Where => SyntaxFacts.GetText(SyntaxKind.WhereKeyword);
	public static string From => SyntaxFacts.GetText(SyntaxKind.FromKeyword);
	public static string Group => SyntaxFacts.GetText(SyntaxKind.GroupKeyword);
	public static string Join => SyntaxFacts.GetText(SyntaxKind.JoinKeyword);
	public static string Into => SyntaxFacts.GetText(SyntaxKind.IntoKeyword);
	public static string Let => SyntaxFacts.GetText(SyntaxKind.LetKeyword);
	public static string By => SyntaxFacts.GetText(SyntaxKind.ByKeyword);
	public static string Select => SyntaxFacts.GetText(SyntaxKind.SelectKeyword);
	public static string OrderBy => SyntaxFacts.GetText(SyntaxKind.OrderByKeyword);
	public static string On => SyntaxFacts.GetText(SyntaxKind.OnKeyword);
	new public static string Equals => SyntaxFacts.GetText(SyntaxKind.EqualsKeyword);
	public static string Ascending => SyntaxFacts.GetText(SyntaxKind.AscendingKeyword);
	public static string Descending => SyntaxFacts.GetText(SyntaxKind.DescendingKeyword);
	public static string NameOf => SyntaxFacts.GetText(SyntaxKind.NameOfKeyword);
	public static string Async => SyntaxFacts.GetText(SyntaxKind.AsyncKeyword);
	public static string Await => SyntaxFacts.GetText(SyntaxKind.AwaitKeyword);
	public static string When => SyntaxFacts.GetText(SyntaxKind.WhenKeyword);
	public static string Or => SyntaxFacts.GetText(SyntaxKind.OrKeyword);
	public static string And => SyntaxFacts.GetText(SyntaxKind.AndKeyword);
	public static string Not => SyntaxFacts.GetText(SyntaxKind.NotKeyword);
	public static string With => SyntaxFacts.GetText(SyntaxKind.WithKeyword);
	public static string Init => SyntaxFacts.GetText(SyntaxKind.InitKeyword);
	public static string Record => SyntaxFacts.GetText(SyntaxKind.RecordKeyword);
	public static string Managed => SyntaxFacts.GetText(SyntaxKind.ManagedKeyword);
	public static string Unmanaged => SyntaxFacts.GetText(SyntaxKind.UnmanagedKeyword);
	public static string Elif => SyntaxFacts.GetText(SyntaxKind.ElifKeyword);
	public static string EndIf => SyntaxFacts.GetText(SyntaxKind.EndIfKeyword);
	public static string Region => SyntaxFacts.GetText(SyntaxKind.RegionKeyword);
	public static string EndRegion => SyntaxFacts.GetText(SyntaxKind.EndRegionKeyword);
	public static string Define => SyntaxFacts.GetText(SyntaxKind.DefineKeyword);
	public static string Undef => SyntaxFacts.GetText(SyntaxKind.UndefKeyword);
	public static string Warning => SyntaxFacts.GetText(SyntaxKind.WarningKeyword);
	public static string Error => SyntaxFacts.GetText(SyntaxKind.ErrorKeyword);
	public static string Line => SyntaxFacts.GetText(SyntaxKind.LineKeyword);
	public static string Pragma => SyntaxFacts.GetText(SyntaxKind.PragmaKeyword);
	public static string Hidden => SyntaxFacts.GetText(SyntaxKind.HiddenKeyword);
	public static string Checksum => SyntaxFacts.GetText(SyntaxKind.ChecksumKeyword);
	public static string Disable => SyntaxFacts.GetText(SyntaxKind.DisableKeyword);
	public static string Restore => SyntaxFacts.GetText(SyntaxKind.RestoreKeyword);
	public static string Reference => SyntaxFacts.GetText(SyntaxKind.ReferenceKeyword);
	public static string Load => SyntaxFacts.GetText(SyntaxKind.LoadKeyword);
	public static string Nullable => SyntaxFacts.GetText(SyntaxKind.NullableKeyword);
	public static string Enable => SyntaxFacts.GetText(SyntaxKind.EnableKeyword);
	public static string Warnings => SyntaxFacts.GetText(SyntaxKind.WarningsKeyword);
	public static string Annotations => SyntaxFacts.GetText(SyntaxKind.AnnotationsKeyword);
	public static string Var => SyntaxFacts.GetText(SyntaxKind.VarKeyword);
}